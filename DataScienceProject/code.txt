import numpy as np
import pandas as pd
import matplotlib as plt
import seaborn as sns
from ipywidgets import interact



data=pd.read_csv("Optimising_Agriculture_Production.csv")


print("Shape of Dataset : ",data.shape)

data.head()


data.isnull().sum()

data['label'].value_counts()


print("Average Ratio of Nitrogen in the soil :{0:.2f}".format(data['N'].mean()))
print("Average Ratio of Phosporous in the soil :{0:.2f}".format(data['P'].mean()))
print("Average Ratio of Potassium in the soil :{0:.2f}".format(data['K'].mean()))
print("Average Temparature in celsius:{0:.2f}".format(data['temperature'].mean()))
print("Average Relative Humidity is :{0:.2f}".format(data['humidity'].mean()))
print("Average value of ph of the soil :{0:.2f}".format(data['ph'].mean()))
print("Average Rainfall in mm :{0:.2f}".format(data['rainfall'].mean()))


@interact
def summary(crops = list(data['label'].value_counts().index)):
    x=data[data['label']==crops]
    print("**********************************************************************")
    print("Statistics for Nitrogen ")
    print("Minimum Nitrogen Required : ",x['N'].min())
    print("Average Nitrogen Required : ",x['N'].mean())
    print("Maximum Nitrogen Required : ",x['N'].max())
    print("**********************************************************************")
    print("Statistics for  Phosporous")
    print("Minimum Phosporous Required : ",x['P'].min())
    print("Average Phosporous Required : ",x['P'].mean())
    print("Maximum Phosporous Required : ",x['P'].max())
    print("**********************************************************************")
    print("Statistics for  Potassium")
    print("Minimum Potassium Required : ",x['K'].min())
    print("Average Potassium Required : ",x['K'].mean())
    print("Maximum Potassium Required : ",x['K'].max())
    print("**********************************************************************")
    print("Statistics for Temparature ")
    print("Minimum Temparature Required : {0:.2f}".format(x['temperature'].min()))
    print("Average Temparature Required : {0:.2f}".format(x['temperature'].mean()))
    print("Maximum Temparature Required : {0:.2f}".format(x['temperature'].max()))
    print("**********************************************************************")
    print("Statistics for Humidity ")
    print("Minimum Humidity Required : {0:.2f}".format(x['humidity'].min()))
    print("Average Humidity Required : {0:.2f}".format(x['humidity'].mean()))
    print("Maximum Humidity Required : {0:.2f}".format(x['humidity'].max()))
    print("**********************************************************************")
    print("Statistics for ph ")
    print("Minimum ph Required : {0:.2f}".format(x['ph'].min()))
    print("Average ph Required : {0:.2f}".format(x['ph'].mean()))
    print("Maximum ph Required : {0:.2f}".format(x['ph'].max()))
    print("**********************************************************************")
    print("Statistics for Rainfall ")
    print("Minimum Rainfall Required : {0:.2f}".format(x['rainfall'].min()))
    print("Average Rainfall Required : {0:.2f}".format(x['rainfall'].mean()))
    print("Maximum Rainfall Required : {0:.2f}".format(x['rainfall'].max()))
    


@interact
def compare(conditions = ['N','P','K','temperature','ph','humidity','rainfall']):
    print("Average Value for ",conditions,"is {0:.2f}".format(data[conditions].mean()))
    print("************************************************************************************************")
    print("Rice : {0:.2f}".format(data[(data['label']=='rice')][conditions].mean()))
    print("Chickpea : {0:.2f}".format(data[(data['label']=='chickpea')][conditions].mean()))
    print("orange : {0:.2f}".format(data[(data['label']=='orange')][conditions].mean()))
    print("maize : {0:.2f}".format(data[(data['label']=='maize')][conditions].mean()))
    print("banana : {0:.2f}".format(data[(data['label']=='banana')][conditions].mean()))
    print("watermelon : {0:.2f}".format(data[(data['label']=='watermelon')][conditions].mean()))
    print("mothbeans : {0:.2f}".format(data[(data['label']=='mothbeans')][conditions].mean()))
    print("kidneybeans : {0:.2f}".format(data[(data['label']=='kidneybeans')][conditions].mean()))
    print("cotton : {0:.2f}".format(data[(data['label']=='cotton')][conditions].mean()))
    print("coffee : {0:.2f}".format(data[(data['label']=='coffee')][conditions].mean()))
    print("lentil : {0:.2f}".format(data[(data['label']=='lentil')][conditions].mean()))
    print("coconut : {0:.2f}".format(data[(data['label']=='coconut')][conditions].mean()))
    print("jute : {0:.2f}".format(data[(data['label']=='jute')][conditions].mean()))
    print("grapes : {0:.2f}".format(data[(data['label']=='grapes')][conditions].mean()))
    print("pomegranate : {0:.2f}".format(data[(data['label']=='pomegranate')][conditions].mean()))
    print("mungbean : {0:.2f}".format(data[(data['label']=='mungbean')][conditions].mean()))
    print("papaya : {0:.2f}".format(data[(data['label']=='papaya')][conditions].mean()))
    print("apple : {0:.2f}".format(data[(data['label']=='apple')][conditions].mean()))
    print("blackgram : {0:.2f}".format(data[(data['label']=='blackgram')][conditions].mean()))
    print("muskmelon : {0:.2f}".format(data[(data['label']=='muskmelon')][conditions].mean()))
    print("mango : {0:.2f}".format(data[(data['label']=='mango')][conditions].mean()))
    print("pigeonpeas : {0:.2f}".format(data[(data['label']=='pigeonpeas')][conditions].mean()))
    

@interact
def compare(conditions = ['N','P','K','temperature','ph','humidity','rainfall']):
    print("Crops which require greater than Average",conditions,'\n')
    print(data[data[conditions]>data[conditions].mean()]['label'].unique())
    print("********************************************************************************")
    print("Crops which require less than Average",conditions,'\n')
    print(data[data[conditions]<=data[conditions].mean()]['label'].unique())



plt.subplot(2,4,1)
sns.distplot(data['N'],color='blue')
plt.xlabel("Ratio of nitrogen",fontsize='12')
plt.grid()

plt.subplot(2,4,2)
sns.distplot(data['P'],color='pink')
plt.xlabel("Ratio of phosporous",fontsize='12')
plt.grid()

plt.subplot(2,4,3)
sns.distplot(data['K'],color='green')
plt.xlabel("Ratio of Potassium",fontsize='12')
plt.grid()

plt.subplot(2,4,4)
sns.distplot(data['temperature'],color='blue')
plt.xlabel("Temperature",fontsize='12')
plt.grid()

plt.subplot(2,4,5)
sns.distplot(data['ph'],color='yellow')
plt.xlabel("pH Level",fontsize='12')
plt.grid()

plt.subplot(2,4,6)
sns.distplot(data['humidity'],color='purple')
plt.xlabel("Humidity",fontsize='12')
plt.grid()

plt.subplot(2,4,7)
sns.distplot(data['rainfall'],color='grey')
plt.xlabel("Rainfall",fontsize='12')
plt.grid()

plt.suptitle('Distribution for Agricultural Conditions',fontsize=20)
plt.show()



print("Some Interesting Patterns")
print("**********************************************************************")
print("Crops which requires very high ratio of Nitrogen content in soil ",data[data['N']>120]['label'].unique())
print("Crops which requires very high ratio of Phosporous content in soil ",data[data['P']>100]['label'].unique())
print("Crops which requires very high ratio of Potassium content in soil ",data[data['K']>200]['label'].unique())
print("Crops which require very high rainfall ",data[data['rainfall']>200]['label'].unique())
print("Crops which require very low temparature ",data[data['temperature']<10]['label'].unique())
print("Crops which require very high temperature ",data[data['temperature']>40]['label'].unique())
print("Crops which require very low humidity ",data[data['humidity']<20]['label'].unique())
print("Crops which require very low ph ",data[data['ph']<4]['label'].unique())
print("Crops which require very high ph ",data[data['ph']>9]['label'].unique())



print("Summer Crops")
print(data[(data['temperature']>30) & (data['humidity']>50)]['label'].unique())
print("************************************************************************************")
print("Winter Crops")
print(data[(data['temperature']<20) & (data['humidity']>30)]['label'].unique())
print("************************************************************************************")
print("Rainy Crops")
print(data[(data['rainfall']>200) & (data['humidity']>20)]['label'].unique())
print("************************************************************************************")



from sklearn.cluster import KMeans
x=data.drop(['label'],axis=1)
x=x.values
print(x.shape)


import matplotlib.pyplot as plt 
plt.rcParams['figure.figsize']=(10,4)
wcss=[]
for i in range(1,11):
    km=KMeans(n_clusters=i,init='k-means++',max_iter=300,n_init=10,random_state=0)
    km.fit(x)
    wcss.append(km.inertia_)
    
plt.plot(range(1,11),wcss)
plt.title('The Elbow method', fontsize=20)
plt.xlabel('Number of Clusters')
plt.ylabel('wcss')
plt.show()




km=KMeans(n_clusters=4,init='k-means++',max_iter=300,n_init=10,random_state=0)
y_means=km.fit_predict(x)

a=data['label']
y_means=pd.DataFrame(y_means)
z=pd.concat([y_means,a],axis=1)
z=z.rename(columns={0:'cluster'})

print("Let's check the results after applying K Means Clustering Analysis \n")
print("Crops in First Cluster",z[z['cluster']==0]['label'].unique())
print("****************************************************************************")
print("Crops in Second Cluster",z[z['cluster']==1]['label'].unique())
print("****************************************************************************")
print("Crops in Third Cluster",z[z['cluster']==2]['label'].unique())
print("****************************************************************************")
print("Crops in Fourth Cluster",z[z['cluster']==3]['label'].unique())
print("****************************************************************************")




y=data['label']
x=data.drop(['label'],axis=1)
print("Shape of x ",x.shape)
print("Shape of y ",y.shape)




from sklearn.model_selection import train_test_split

x_train, x_test, y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

print("The shape of x train",x_train.shape)
print("The shape of x test",x_test.shape)
print("The shape of y train",y_train.shape)
print("The shape of y test",y_test.shape)





from sklearn.linear_model import LogisticRegression
model= LogisticRegression()
model.fit(x_train,y_train)
y_pred=model.predict(x_test)





from sklearn.metrics import confusion_matrix

plt.rcParams['figure.figsize']=(10,10)
cm=confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,cmap='Wistia')
plt.title("Confusion Matrix for Logistic Regression",fontsize=15)
plt.show()





from sklearn.metrics import classification_report
cr=classification_report(y_test,y_pred)
print(cr)






data.head()



prediction=model.predict((np.array([[90,40,40,20,80,7,200]])))
print("The Suggested Crop for given Climatic Condition is : ",prediction)